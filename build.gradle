plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.0'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'jacoco'
    id "org.openapi.generator" version "6.6.0"
}

ext {
    set('springCloudAzureVersion', "5.5.0")
}

group = 'com.jcastillo6'
version = '1.0.0'

java {
    sourceCompatibility = '17'
    targetCompatibility = '17'
}

repositories {
    mavenCentral()
}

jacoco {
    toolVersion = "0.8.9"
}

openApiGenerate {
    generatorName.set("spring")
    inputSpec.set("$rootDir/src/main/resources/api/openapi.yaml")
    outputDir.set("$buildDir/openapi")
    apiPackage.set("com.jcastillo.warehouse.api")
    modelPackage.set("com.jcastillo.warehouse.model")
    configOptions.set([
        dateLibrary: "java8",
        useTags: "true",
        useBeanValidation: "true",
        performBeanValidation: "true",
        hateoas: "true",
        serializableModel: "true",
        useSpringBoot3: "true",
        interfaceOnly: "true",
        reactive: "true"
    ])
}

bootBuildImage {
    imageName = "registryjcastillo6.azurecr.io/${project.name}:${project.version}"
}

compileJava.dependsOn tasks.named("openApiGenerate")
processResources.dependsOn tasks.named("openApiGenerate")
sourceSets.main.java.srcDir "$buildDir/openapi/src/main/java"
check.dependsOn jacocoTestCoverageVerification

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb-reactive'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.springframework.boot:spring-boot-starter-validation:3.1.2'
    implementation ('org.springframework.boot:spring-boot-starter-hateoas') {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-web'
    }
    implementation ('org.openapitools:openapi-generator-gradle-plugin:6.6.0') {
        exclude group: 'org.slf4j', module: 'slf4j-simple'
    }
    compileOnly 'org.openapitools:jackson-databind-nullable:0.2.1'

    // logging and tracing
    implementation 'net.logstash.logback:logstash-logback-encoder:7.3'
    implementation 'io.micrometer:micrometer-tracing-bridge-otel'
    implementation 'io.opentelemetry:opentelemetry-exporter-zipkin'

    implementation 'org.springframework.boot:spring-boot-starter-aop'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.3.0'
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-xml'
    implementation 'com.fasterxml.jackson.module:jackson-module-jakarta-xmlbind-annotations'
    annotationProcessor 'org.projectlombok:lombok:1.18.22'
    compileOnly 'org.projectlombok:lombok:1.18.22'
    runtimeOnly 'org.springframework.boot:spring-boot-starter-actuator:3.1.0'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'io.projectreactor:reactor-test'
    testImplementation 'io.rest-assured:rest-assured:5.4.0'
    testImplementation 'de.flapdoodle.embed:de.flapdoodle.embed.mongo.spring3x:4.12.0'

}

dependencyManagement {
    imports {
        mavenBom "com.azure.spring:spring-cloud-azure-dependencies:${springCloudAzureVersion}"
    }
}

tasks.named('test') {
    useJUnitPlatform()
    finalizedBy(jacocoTestReport)
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.1
            }
        }

        rule {
            enabled = true
            element = 'CLASS'
            includes = ['org.gradle.*']

            limit {
                counter = 'LINE'
                value = 'TOTALCOUNT'
                maximum = 0.3
            }
        }
    }
}

jacocoTestReport {
    dependsOn test

    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

    subprojects.each {
        sourceSets it.sourceSets.main
    }

    reports {
        xml.required = false
        csv.required = false
        html.destination file("${buildDir}/reports/jacoco")
    }
}